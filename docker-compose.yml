services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: library-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: ./library
      dockerfile: Dockerfile
    container_name: library-backend
    restart: unless-stopped
    environment:
      # Database
      DB_URL: ${DB_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
      
      # CORS
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      
      # Yandex Cloud
      YANDEX_REGION: ${YANDEX_REGION}
      YANDEX_ENDPOINT: ${YANDEX_ENDPOINT}
      YANDEX_BUCKET: ${YANDEX_BUCKET}
      YANDEX_ACCESS_KEY: ${YANDEX_ACCESS_KEY}
      YANDEX_SECRET_KEY: ${YANDEX_SECRET_KEY}
      
      # Spring Profile
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./library-frontend
      dockerfile: Dockerfile
    container_name: library-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL}
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  library-network:
    driver: bridge
    name: library-network

volumes:
  postgres_data:
    driver: local
    name: library-postgres-data 